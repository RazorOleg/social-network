{"version":3,"file":"static/js/757.1367340c.chunk.js","mappings":"sMAIA,MAIA,EAJiBA,IACNC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,EAAEC,OAAOC,SAAEL,EAAMM,U,aCA5C,MAmBA,EAnBgBN,IACZ,IAEIO,EAFWP,EAAMQ,MAAMC,SAEKC,KAAIC,IAAKV,EAAAA,EAAAA,KAACW,EAAO,CAACN,QAASK,EAAEL,SAAcK,EAAEE,MAM7E,OACIC,EAAAA,EAAAA,MAAA,OAAAT,SAAA,EACIJ,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,EAAEM,SAASJ,UACvBJ,EAAAA,EAAAA,KAAA,OAAAI,SAAME,OAEVN,EAAAA,EAAAA,KAACc,EAAAA,EAAW,CAACC,SATDC,IAChBjB,EAAMkB,WAAWD,EAAOE,QAAQ,EAQSC,UAAW,OAC9C,E,aCXd,MAyBA,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KA1BqBd,IACb,CACJA,MAAOA,EAAMe,eAwBQ,CAAEL,WAAW,OACtCM,EAAAA,EAFJ,CAGEC,E,qDCpCK,MCAP,EAA6B,gCAA7B,EAAyE,+B,aCKzE,MAoCA,EApCqBzB,IACjB,IAAI0B,GFNsBC,EEMU3B,EAAMoB,UFNDQ,GACpCA,EACKA,EAAMC,OAASF,EAAiB,iBAANG,OAAwBH,EAAS,iBAA/D,EADa,YADOA,MEY1B,OACI1B,EAAAA,EAAAA,KAAC8B,EAAAA,GAAM,CACHC,cANc,CAClBb,QAAS,IAMLH,SAAUhB,EAAMgB,SAASX,SAExB4B,IAAA,IAAC,OAAEC,EAAM,QAAEC,GAASF,EAAA,OACjBnB,EAAAA,EAAAA,MAACsB,EAAAA,GAAI,CAAA/B,SAAA,EACDS,EAAAA,EAAAA,MAAA,OAAAT,SAAA,EACIJ,EAAAA,EAAAA,KAACoC,EAAAA,GAAK,CACFC,UAAU,WACVC,KAAK,UACLC,YAAY,kBACZC,SAAUf,EACVxB,UACIiC,EAAQhB,SAAWe,EAAOf,QACpBuB,EACA,KAEbR,EAAOf,SAAWgB,EAAQhB,UAAWlB,EAAAA,EAAAA,KAAA,OAAKC,UAAWwC,EAAiBrC,SAAE6B,EAAOf,cAEpFlB,EAAAA,EAAAA,KAAA,OAAAI,UACIJ,EAAAA,EAAAA,KAAA,UAAQ0C,KAAK,SAAQtC,SAAC,YAEvB,GAEN,C,uEClCjB,MAAMuC,EAA8BpC,IACxB,CACJqC,OAAQrC,EAAMsC,KAAKD,SAIdrB,EAAoBuB,IAcQzB,EAAAA,EAAAA,IAAQsB,EAARtB,EAZXtB,GAIjBA,EAAM6C,QAIJ5C,EAAAA,EAAAA,KAAC8C,EAAS,IAAK/C,KAHXC,EAAAA,EAAAA,KAAC+C,EAAAA,GAAQ,CAACC,GAAG,Y,iCChBhC,SAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yB","sources":["components/Dialogs/Message/Message.jsx","components/Dialogs/Dialog/Dialog.jsx","components/Dialogs/Dialog/DialogContainer.jsx","utils/validators.js","webpack://social-network/./src/components/common/AddTextForm/AddTextForm.module.css?1242","components/common/AddTextForm/AddTextForm.jsx","hoc/withAuthRedirect.jsx","webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e"],"sourcesContent":["import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport Message from \"../Message/Message\";\r\nimport AddTextForm from '../../common/AddTextForm/AddTextForm';\r\n\r\nconst Dialog = (props) => {\r\n    let messages = props.state.messages;\r\n\r\n    let messagesElements = messages.map(m => <Message message={m.message} key={m.id} />);\r\n\r\n    let onAddMessage = (values) => {\r\n        props.addMessage(values.newText);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddTextForm onSubmit={onAddMessage} maxlength={10}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialog;\r\n\r\n","\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../../hoc/withAuthRedirect';\r\nimport { addMessage } from '../../../redux/actions/actions';\r\nimport Dialog from './Dialog';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return ({\r\n        state: state.dialogsPage\r\n    });\r\n}\r\n\r\n// const mapdispatchToProps = (dispatch) => {\r\n//     return ({\r\n//         addMessage: () => {\r\n//             dispatch(addMessageActionCreator());\r\n//         },\r\n//         updateNewMessageText: (text) => {\r\n//             let action = updateNewMessageTextActionCreator(text);\r\n//             dispatch(action);\r\n//         }\r\n//     });\r\n// }\r\n\r\n// const DialogWithAuthRedirect = withAuthRedirect(Dialog);\r\n\r\n// const DialogContainer = connect(mapStateToProps, {\r\n//     addMessage,\r\n//     updateNewMessageText\r\n// })(DialogWithAuthRedirect);\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { addMessage }),\r\n    withAuthRedirect\r\n)(Dialog);","\r\nexport const validateField = (maxLength) => (value) => {\r\n    if (!value) return \"Required\";\r\n    else  if (value.length > maxLength) return `Max length is ${maxLength} symbols`; \r\n    return undefined;\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"errorInput\":\"AddTextForm_errorInput__QAGc9\",\"errorText\":\"AddTextForm_errorText__ALgRD\"};","import { Field, Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { validateField } from \"../../../utils/validators\";\r\nimport styles from './AddTextForm.module.css';\r\n\r\n\r\nconst AddTextForm = (props) => {\r\n    let fieldValidation = validateField(props.maxlength);\r\n\r\n    const initialValues = {\r\n        newText: '',\r\n    };\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={props.onSubmit}\r\n        >\r\n            {({ errors, touched }) => (\r\n                <Form>\r\n                    <div>\r\n                        <Field\r\n                            component=\"textarea\"\r\n                            name=\"newText\"\r\n                            placeholder=\"Enter your text\"\r\n                            validate={fieldValidation}\r\n                            className={\r\n                                touched.newText && errors.newText\r\n                                    ? styles.errorInput\r\n                                    : \"\"\r\n                            } />\r\n                        {errors.newText && touched.newText && <div className={styles.errorText}>{errors.newText}</div>}\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"submit\">Add</button>\r\n                    </div>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default AddTextForm;","import React from 'react';\r\nimport { connect, useSelector } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nconst mapStateToPropsForRedirect = (state) => {\r\n    return ({\r\n        isAuth: state.auth.isAuth\r\n    });\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    const WithAuthRedirect = (props) => {\r\n\r\n        //const isAuth = useSelector((state) => state.auth.isAuth);\r\n\r\n        if (!props.isAuth) {\r\n            return <Navigate to='/login' />\r\n        }\r\n\r\n        return <Component {...props} />\r\n\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(WithAuthRedirect);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__ofTEI\",\"dialogsItems\":\"Dialogs_dialogsItems__6Li-9\",\"active\":\"Dialogs_active__ExNYW\",\"messages\":\"Dialogs_messages__U0CBT\",\"message\":\"Dialogs_message__wno6O\"};"],"names":["props","_jsx","className","s","dialog","children","message","messagesElements","state","messages","map","m","Message","id","_jsxs","AddTextForm","onSubmit","values","addMessage","newText","maxlength","compose","connect","dialogsPage","withAuthRedirect","Dialog","fieldValidation","maxLength","value","length","concat","Formik","initialValues","_ref","errors","touched","Form","Field","component","name","placeholder","validate","styles","type","mapStateToPropsForRedirect","isAuth","auth","Component","Navigate","to"],"sourceRoot":""}
{"version":3,"file":"static/js/114.d702c787.chunk.js","mappings":"yKAOA,MAIA,EAJgBA,IAA8B,IAA7B,QAACC,GAAsBD,EACpC,OAAOE,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,EAAEC,OAAOC,SAAEL,GAAc,E,wCCCpD,MAsBA,GAAeM,EAAAA,EAAAA,IAtBAC,KACX,MAAMC,GAAWC,EAAAA,EAAAA,KAAaC,GAAyBA,EAAMC,YAAYH,WAEnEI,GAAWC,EAAAA,EAAAA,MAEXC,EAAmBN,EAASO,KAAIC,IAAKf,EAAAA,EAAAA,KAACgB,EAAO,CAACjB,QAASgB,EAAEhB,SAAcgB,EAAEE,MAO/E,OACIC,EAAAA,EAAAA,MAAA,OAAAd,SAAA,EACIJ,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,EAAEK,SAASH,UACvBJ,EAAAA,EAAAA,KAAA,OAAAI,SAAMS,OAEVb,EAAAA,EAAAA,KAACmB,EAAAA,EAAW,CAACC,SAVCC,IAClBV,EAASW,EAAAA,EAAeC,WAAWF,EAAOG,UAC1CH,EAAOG,QAAU,EAAE,EAQsBC,UAAW,OAC9C,G,qDCxBP,MCFP,EAA6B,gCAA7B,EAAyE,+B,aCSzE,MAoCA,EApCoB3B,IAA8C,IAA7C,UAAC2B,EAAS,SAAEL,GAA2BtB,EACpD4B,GFRsBC,EEQUF,EFRkCG,GACjEA,EACKA,EAAMC,OAASF,EAAiB,iBAANG,OAAwBH,EAAS,iBAA/D,EADa,YADOA,MEc1B,OACI3B,EAAAA,EAAAA,KAAC+B,EAAAA,GAAM,CACHC,cANc,CAClBR,QAAS,IAMLJ,SAAUA,EAAShB,SAElB6B,IAAA,IAAC,OAAEC,EAAM,QAAEC,GAASF,EAAA,OACjBf,EAAAA,EAAAA,MAACkB,EAAAA,GAAI,CAAAhC,SAAA,EACDc,EAAAA,EAAAA,MAAA,OAAAd,SAAA,EACIJ,EAAAA,EAAAA,KAACqC,EAAAA,GAAK,CACFC,UAAU,WACVC,KAAK,UACLC,YAAY,kBACZC,SAAUf,EACVzB,UACIkC,EAAQX,SAAWU,EAAOV,QACpBkB,EACA,KAEbR,EAAOV,SAAWW,EAAQX,UAAWxB,EAAAA,EAAAA,KAAA,OAAKC,UAAWyC,EAAiBtC,SAAE8B,EAAOV,cAEpFxB,EAAAA,EAAAA,KAAA,OAAAI,UACIJ,EAAAA,EAAAA,KAAA,UAAQ2C,KAAK,SAAQvC,SAAC,YAEvB,GAEN,C,uECtCjB,MAAMwC,EAA8BnC,IACxB,CACJoC,OAAQpC,EAAMqC,KAAKD,SAIdxC,EAAoB0C,IAcQC,EAAAA,EAAAA,IAAQJ,EAARI,EAZXC,GAIjBA,EAAMJ,QAIJ7C,EAAAA,EAAAA,KAAC+C,EAAS,IAAKE,KAHXjD,EAAAA,EAAAA,KAACkD,EAAAA,GAAQ,CAACC,GAAG,Y,iCChBhC,SAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yB","sources":["components/Dialogs/Message/Message.tsx","components/Dialogs/Dialog/Dialog.tsx","utils/validators.ts","webpack://social-network/./src/components/common/AddTextForm/AddTextForm.module.css?1242","components/common/AddTextForm/AddTextForm.tsx","hoc/withAuthRedirect.jsx","webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e"],"sourcesContent":["import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype MessageProps = {\r\n    message: string\r\n}\r\n\r\nconst Message = ({message}: MessageProps) => {\r\n    return <div className={s.dialog}>{message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport Message from \"../Message/Message\";\r\nimport AddTextForm from '../../common/AddTextForm/AddTextForm';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootStateType } from '../../../redux/store/redux-store';\r\nimport { withAuthRedirect } from '../../../hoc/withAuthRedirect';\r\nimport { dialogsActions } from '../../../redux/actions/dialogs';\r\n\r\nconst Dialog = () => {\r\n    const messages = useSelector((state: RootStateType) => state.dialogsPage.messages);\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const messagesElements = messages.map(m => <Message message={m.message} key={m.id} />);\r\n\r\n    const onAddMessage = (values: {newText: string}) => {\r\n        dispatch(dialogsActions.addMessage(values.newText));\r\n        values.newText = '';\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddTextForm onSubmit={onAddMessage} maxlength={10}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withAuthRedirect(Dialog);\r\n\r\n","type FieldValidationType = (value: string) => string | undefined\r\n\r\n\r\nexport const validateField = (maxLength: number): FieldValidationType => (value) => {\r\n    if (!value) return \"Required\";\r\n    else  if (value.length > maxLength) return `Max length is ${maxLength} symbols`; \r\n    return undefined;\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"errorInput\":\"AddTextForm_errorInput__QAGc9\",\"errorText\":\"AddTextForm_errorText__ALgRD\"};","import React from \"react\";\r\nimport { Field, Form, Formik, FormikHelpers } from \"formik\";\r\nimport { validateField } from \"../../../utils/validators\";\r\nimport styles from './AddTextForm.module.css';\r\n\r\ntype AddTextFormProps = {\r\n    maxlength: number\r\n    onSubmit: ((values: { newText: string; }, formikHelpers: FormikHelpers<{ newText: string; }>) => void | Promise<any>)\r\n}\r\n\r\nconst AddTextForm = ({maxlength, onSubmit}: AddTextFormProps) => {\r\n    let fieldValidation = validateField(maxlength);\r\n\r\n    const initialValues = {\r\n        newText: '',\r\n    };\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={onSubmit}\r\n        >\r\n            {({ errors, touched }) => (\r\n                <Form>\r\n                    <div>\r\n                        <Field\r\n                            component=\"textarea\"\r\n                            name=\"newText\"\r\n                            placeholder=\"Enter your text\"\r\n                            validate={fieldValidation}\r\n                            className={\r\n                                touched.newText && errors.newText\r\n                                    ? styles.errorInput\r\n                                    : \"\"\r\n                            } />\r\n                        {errors.newText && touched.newText && <div className={styles.errorText}>{errors.newText}</div>}\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"submit\">Add</button>\r\n                    </div>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default AddTextForm;","import React from 'react';\r\nimport { connect, useSelector } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nconst mapStateToPropsForRedirect = (state) => {\r\n    return ({\r\n        isAuth: state.auth.isAuth\r\n    });\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    const WithAuthRedirect = (props) => {\r\n\r\n        //const isAuth = useSelector((state) => state.auth.isAuth);\r\n\r\n        if (!props.isAuth) {\r\n            return <Navigate to='/login' />\r\n        }\r\n\r\n        return <Component {...props} />\r\n\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(WithAuthRedirect);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__ofTEI\",\"dialogsItems\":\"Dialogs_dialogsItems__6Li-9\",\"active\":\"Dialogs_active__ExNYW\",\"messages\":\"Dialogs_messages__U0CBT\",\"message\":\"Dialogs_message__wno6O\"};"],"names":["_ref","message","_jsx","className","s","dialog","children","withAuthRedirect","Dialog","messages","useSelector","state","dialogsPage","dispatch","useDispatch","messagesElements","map","m","Message","id","_jsxs","AddTextForm","onSubmit","values","dialogsActions","addMessage","newText","maxlength","fieldValidation","maxLength","value","length","concat","Formik","initialValues","_ref2","errors","touched","Form","Field","component","name","placeholder","validate","styles","type","mapStateToPropsForRedirect","isAuth","auth","Component","connect","props","Navigate","to"],"sourceRoot":""}
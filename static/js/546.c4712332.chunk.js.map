{"version":3,"file":"static/js/546.c4712332.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Profile/Profile.module.css?b512","components/Profile/ProfileInfo/ProfileDataForm/ProfileStatus.tsx","webpack://social-network/./src/components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.module.css?9ff0","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/Contact.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social-network/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://social-network/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","utils/validators.ts","webpack://social-network/./src/components/common/AddTextForm/AddTextForm.module.css?1242","components/common/AddTextForm/AddTextForm.tsx","hoc/withAuthRedirect.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Profile_container__ev8pU\",\"h2\":\"Profile_h2__35TaR\",\"photoLarge\":\"Profile_photoLarge__9AecM\"};","import React, { ChangeEvent, useEffect } from 'react';\r\nimport { useState } from 'react';\r\n\r\ntype ProfileStatusProps = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus = ({status, updateUserStatus}: ProfileStatusProps) => {\r\n    const [isEditMode, setEditMode] = useState(false);\r\n    const [userStatus, setStatus] = useState(status);\r\n\r\n\r\n    useEffect(() => {\r\n        setStatus(status);\r\n    }, [status]);\r\n\r\n    const toggleEditMode = () => {\r\n        setEditMode(!isEditMode);\r\n\r\n        if (isEditMode) {\r\n            updateUserStatus(userStatus);\r\n        }\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !isEditMode &&\r\n                <div>\r\n                    <b>Status: </b><span onDoubleClick={() => { toggleEditMode() }}>{status}</span>\r\n                </div>\r\n            }\r\n            {\r\n                isEditMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={() => { toggleEditMode() }} value={userStatus}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatus;","// extracted by mini-css-extract-plugin\nexport default {\"errorInput\":\"ProfileDataForm_errorInput__VmDSO\",\"errorText\":\"ProfileDataForm_errorText__MVPOd\"};","import { Field, Form, Formik } from 'formik';\r\nimport React, { useState } from 'react';\r\nimport styles from './ProfileDataForm.module.css';\r\nimport { ProfileType } from '../../../../types/types';\r\n\r\ntype ProfileDataFormProps = {\r\n    profile: ProfileType\r\n    onSubmit: (data: ProfileType) => void\r\n    errors: ErrorsType | null\r\n}\r\n\r\nexport type ErrorsType = {\r\n    fullname: string\r\n    aboutme: string\r\n    [key: string]: string\r\n}\r\n\r\nconst ProfileDataForm = ({ profile, onSubmit, errors }: ProfileDataFormProps) => {\r\n    const [isLookingForAJob, setLookingForAJob] = useState(profile.lookingForAJob);\r\n\r\n    const toggleLookingForAJob = () => {\r\n        setLookingForAJob(!isLookingForAJob);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={profile}\r\n                onSubmit={onSubmit}\r\n            >\r\n                    <Form>\r\n                        <div><button type=\"submit\">save</button></div>\r\n                        <div>\r\n                            <b>Full name:</b>\r\n                            <Field as=\"input\" name=\"fullName\" placeholder=\"Full name\" className={errors && errors.fullname ? styles.errorInput : \"\"} />\r\n                            {errors && errors.fullname && <div className={styles.errorText}>{errors.fullname}</div>}\r\n                        </div>\r\n                        <div>\r\n                            <b>About me:</b>\r\n                            <Field as=\"textarea\" name=\"aboutMe\" placeholder=\"About me\" className={errors && errors.aboutme ? styles.errorInput : \"\"} />\r\n                            {errors && errors.aboutme && <div className={styles.errorText}>{errors.aboutme}</div>}\r\n                        </div>\r\n                        <div>\r\n                            <b>Looking for a job:</b>\r\n                            <Field type=\"checkbox\" name=\"lookingForAJob\" onClick={toggleLookingForAJob} />\r\n                        </div>\r\n                        {isLookingForAJob &&\r\n                            <div>\r\n                                <b>My professional skills: </b>\r\n                                <Field as=\"textarea\" name=\"lookingForAJobDescription\" placeholder=\"My professional skills\" />\r\n                            </div>\r\n                        }\r\n                        <div>\r\n                            <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                                return <div key={key}><b>{key}: </b>\r\n                                    <Field as='input' name={`contacts.${key}`} placeholder={key} className={errors && errors[key] ? styles.errorInput : \"\"} />\r\n                                    {errors && errors[key] && <div className={styles.errorText}>{errors[key]}</div>}\r\n                                </div>\r\n                            })}\r\n                        </div>\r\n                    </Form>\r\n            </Formik >\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileDataForm;","import React from 'react';\r\n\r\ntype ContactProps = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact = ({ contactTitle, contactValue }: ContactProps) => {\r\n    return <div>\r\n        <b>{contactTitle}: </b>{contactValue}\r\n    </div>\r\n};\r\n\r\nexport default Contact;","import React from 'react';\r\nimport { ProfileType } from '../../../../types/types';\r\nimport Contact from '../Contact';\r\n\r\ntype ProfileDataProps = {\r\n    profile: ProfileType\r\n    activateEditMode: () => void\r\n    isCurrentUserProfile: boolean\r\n}\r\n\r\nconst ProfileData = ({ profile, isCurrentUserProfile, activateEditMode }: ProfileDataProps) => {\r\n    return <div>\r\n        {isCurrentUserProfile && <div><button onClick={activateEditMode}>edit</button></div>}\r\n        <div>\r\n            <b>Full name: {profile.fullName}</b>\r\n        </div>\r\n        <div>\r\n            <b>About me: </b>{profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {\r\n            profile.lookingForAJob && <div><b>My professional skills:</b>  {profile.lookingForAJobDescription} </div>\r\n        }\r\n        <div>\r\n            <b>Contacts:</b> {Object.entries(profile.contacts).map(([key, value]) => {\r\n                return <Contact key={key} contactTitle={key} contactValue={value} />\r\n            })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ProfileData;","import React, { ChangeEvent, useState } from 'react';\r\nimport s from '../Profile.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatus from './ProfileDataForm/ProfileStatus';\r\nimport userPhoto from '../../../assets/photos/user.png';\r\nimport { useDispatch } from 'react-redux';\r\nimport { savePhoto, saveProfile } from '../../../redux/reducers/profile-reducer';\r\nimport ProfileDataForm, { ErrorsType } from './ProfileDataForm/ProfileDataForm';\r\nimport { ProfileType } from '../../../types/types';\r\nimport ProfileData from './ProfileDataForm/ProfileData';\r\nimport { AppDispatch } from '../../../redux/store/redux-store';\r\nimport { Dispatch } from 'redux';\r\n\r\ntype ProfileInfoProps = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isCurrentUserProfile: boolean\r\n}\r\n\r\nconst ProfileInfo = ({ profile, status, updateUserStatus, isCurrentUserProfile }: ProfileInfoProps) => {\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [errors, setErrors] = useState<ErrorsType | null>(null);\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onChangeProfilePhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const selectedFile = e.target?.files?.[0];\r\n        if (selectedFile) {\r\n            dispatch(savePhoto(selectedFile));\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (formData: ProfileType) => {\r\n        dispatch(\r\n            saveProfile(formData, (errorMessage: ErrorsType | null) => setErrors(errorMessage), () => {\r\n                setEditMode(false);\r\n                setErrors(null);\r\n            })\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <img src='https://www.topgear.com/sites/default/files/2022/07/13.jpg' alt='' />\r\n            <img className={s.photoLarge} src={profile.photos.large ? profile.photos.large : userPhoto} alt='' />\r\n            {isCurrentUserProfile && <input type='file' onChange={onChangeProfilePhoto} />}\r\n            <div>\r\n                <ProfileStatus status={status} updateUserStatus={updateUserStatus} />\r\n            </div>\r\n            {editMode ?\r\n                <ProfileDataForm profile={profile} onSubmit={onSubmit} errors={errors} /> :\r\n                <ProfileData activateEditMode={() => setEditMode(true)} profile={profile} isCurrentUserProfile={isCurrentUserProfile} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__7qRG4\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostProps = {\r\n  message: string\r\n  likesCount: number\r\n}\r\n\r\nconst Post = ({message, likesCount}: PostProps) => {\r\n    return (\r\n        <div className={s.item}>\r\n        <img src='https://upload.wikimedia.org/wikipedia/commons/thumb/f/f1/Dwayne_Johnson_2%2C_2013.jpg/279px-Dwayne_Johnson_2%2C_2013.jpg' alt=''/>\r\n          { message }\r\n            <div>\r\n          <span>like</span> { likesCount }\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__Nkjpk\",\"posts\":\"MyPosts_posts__gsmvq\"};","import React from 'react';\r\nimport Post from './Post/Post';\r\nimport s from './MyPosts.module.css';\r\nimport AddTextForm from '../../common/AddTextForm/AddTextForm';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootStateType } from '../../../redux/store/redux-store';\r\nimport { profileActions } from '../../../redux/actions/profile';\r\n\r\nconst MyPosts = React.memo(() => {\r\n    const posts = useSelector((state: RootStateType) => state.profilePage.posts);\r\n    const dispatch = useDispatch();\r\n\r\n    const postsElements = posts.map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id} />)\r\n\r\n    const onAddPost = (values: {newText: string}) => {\r\n        dispatch(profileActions.addPost(values.newText));\r\n        values.newText = '';\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddTextForm onSubmit={onAddPost} maxlength={50}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MyPosts;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getUserProfile, getUserStatus, updateUserStatus } from '../../redux/reducers/profile-reducer';\r\nimport { AppDispatch, RootStateType } from '../../redux/store/redux-store';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPosts from './MyPosts/MyPosts';\r\n\r\nconst ProfileContainer = () => {\r\n  const { userId } = useParams();\r\n  const dispatch= useDispatch<AppDispatch>();\r\n  const authorisedUserId = useSelector((state: RootStateType) => state.auth.id);\r\n  const userProfile = useSelector((state: RootStateType) => state.profilePage.profile);\r\n  const userStatus = useSelector((state: RootStateType) => state.profilePage.status);\r\n\r\n  useEffect(() => {\r\n    let id: number | null = null;\r\n\r\n    if (userId) {\r\n      id = Number(userId);\r\n    } else {\r\n      id = authorisedUserId;\r\n    }\r\n\r\n    dispatch(getUserProfile(id));\r\n    dispatch(getUserStatus(id));\r\n  }, [userId, authorisedUserId, dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <ProfileInfo\r\n        profile={userProfile}\r\n        status={userStatus}\r\n        updateUserStatus={updateUserStatus}\r\n        isCurrentUserProfile={!userId}\r\n      />\r\n      <MyPosts />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withAuthRedirect(ProfileContainer);","type FieldValidationType = (value: string) => string | undefined\r\n\r\n\r\nexport const validateField = (maxLength: number): FieldValidationType => (value) => {\r\n    if (!value) return \"Required\";\r\n    else  if (value.length > maxLength) return `Max length is ${maxLength} symbols`; \r\n    return undefined;\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"errorInput\":\"AddTextForm_errorInput__QAGc9\",\"errorText\":\"AddTextForm_errorText__ALgRD\"};","import React from \"react\";\r\nimport { Field, Form, Formik, FormikHelpers } from \"formik\";\r\nimport { validateField } from \"../../../utils/validators\";\r\nimport styles from './AddTextForm.module.css';\r\n\r\ntype AddTextFormProps = {\r\n    maxlength: number\r\n    onSubmit: ((values: { newText: string; }, formikHelpers: FormikHelpers<{ newText: string; }>) => void | Promise<any>)\r\n}\r\n\r\nconst AddTextForm = ({maxlength, onSubmit}: AddTextFormProps) => {\r\n    let fieldValidation = validateField(maxlength);\r\n\r\n    const initialValues = {\r\n        newText: '',\r\n    };\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={onSubmit}\r\n        >\r\n            {({ errors, touched }) => (\r\n                <Form>\r\n                    <div>\r\n                        <Field\r\n                            component=\"textarea\"\r\n                            name=\"newText\"\r\n                            placeholder=\"Enter your text\"\r\n                            validate={fieldValidation}\r\n                            className={\r\n                                touched.newText && errors.newText\r\n                                    ? styles.errorInput\r\n                                    : \"\"\r\n                            } />\r\n                        {errors.newText && touched.newText && <div className={styles.errorText}>{errors.newText}</div>}\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"submit\">Add</button>\r\n                    </div>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default AddTextForm;","import React from 'react';\r\nimport { connect, useSelector } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nconst mapStateToPropsForRedirect = (state) => {\r\n    return ({\r\n        isAuth: state.auth.isAuth\r\n    });\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    const WithAuthRedirect = (props) => {\r\n\r\n        //const isAuth = useSelector((state) => state.auth.isAuth);\r\n\r\n        if (!props.isAuth) {\r\n            return <Navigate to='/login' />\r\n        }\r\n\r\n        return <Component {...props} />\r\n\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(WithAuthRedirect);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n};"],"names":["_ref","status","updateUserStatus","isEditMode","setEditMode","useState","userStatus","setStatus","useEffect","toggleEditMode","_jsxs","children","_jsx","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","profile","onSubmit","errors","isLookingForAJob","setLookingForAJob","lookingForAJob","Formik","initialValues","Form","type","Field","as","name","placeholder","className","fullname","styles","aboutme","onClick","toggleLookingForAJob","Object","keys","contacts","map","key","concat","contactTitle","contactValue","isCurrentUserProfile","activateEditMode","fullName","aboutMe","lookingForAJobDescription","entries","_ref2","Contact","dispatch","useDispatch","editMode","setErrors","Preloader","s","src","alt","photos","large","userPhoto","_e$target","_e$target$files","selectedFile","target","files","savePhoto","ProfileStatus","ProfileDataForm","async","saveProfile","formData","errorMessage","ProfileData","message","likesCount","React","posts","useSelector","state","profilePage","postsElements","p","Post","id","AddTextForm","values","profileActions","addPost","newText","maxlength","withAuthRedirect","ProfileContainer","userId","useParams","authorisedUserId","auth","userProfile","Number","getUserProfile","getUserStatus","_Fragment","ProfileInfo","MyPosts","fieldValidation","maxLength","length","touched","component","validate","mapStateToPropsForRedirect","isAuth","Component","connect","props","Navigate","to"],"sourceRoot":""}
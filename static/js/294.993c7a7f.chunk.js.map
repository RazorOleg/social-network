{"version":3,"file":"static/js/294.993c7a7f.chunk.js","mappings":"kKACA,QAA4B,yBAA5B,EAA0E,kCAA1E,EAA6H,8BAA7H,EAA+K,iCAA/K,EAA2N,wBAA3N,EAAgQ,0BAAhQ,EAAkS,qBAAlS,EAAqU,2BAArU,EAAyW,sBAAzW,EAA6Y,2B,wCCM7Y,MA8EA,EA9EcA,KACV,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,KAAKH,UAC1CI,EAAYC,IAAYC,EAAAA,EAAAA,UAAS,MAkCxC,OAAIN,GACOO,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAG,cAIpBC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIJ,EAAAA,EAAAA,KAAA,MAAAI,SAAI,WACJJ,EAAAA,EAAAA,KAACK,EAAAA,GAAM,CACHC,cAxCU,CAClBC,MAAO,GACPC,SAAU,GACVC,YAAY,EACZC,QAAS,IAqCDC,SAlCMC,IACd,MAAMC,EAAS,CAAC,EAYhB,OAVKD,EAAOL,MAEA,4CAA4CO,KAAKF,EAAOL,SAChEM,EAAON,MAAQ,yBAFfM,EAAON,MAAQ,WAKdK,EAAOJ,WACRK,EAAOL,SAAW,YAGfK,CAAM,EAsBLE,SAlBMC,IACdlB,EAAS,MAETP,GAAS0B,EAAAA,EAAAA,IAAMD,GAAOE,GAAiBpB,EAASoB,KAAe,EAepCd,SAElBe,IAAA,IAAC,OAAEN,EAAM,QAAEO,GAASD,EAAA,OACjBnB,EAAAA,EAAAA,KAACqB,EAAAA,GAAI,CAACC,UAAWC,EAAYnB,UACzBD,EAAAA,EAAAA,MAAA,OAAKmB,UAAWC,EAAqBnB,SAAA,EACjCD,EAAAA,EAAAA,MAAA,OAAKmB,UAAWC,EAAiBnB,SAAA,EAC7BJ,EAAAA,EAAAA,KAAA,SAAAI,SAAO,YACPJ,EAAAA,EAAAA,KAACwB,EAAAA,GAAK,CAACC,KAAK,QAAQC,KAAK,QAAQJ,UAAS,GAAAK,OAAKJ,EAAY,KAAAI,OAAId,EAAON,OAASa,EAAQb,MAAQgB,EAAgB,OAC/GvB,EAAAA,EAAAA,KAAC4B,EAAAA,GAAY,CAACF,KAAK,QAAQG,UAAU,MAAMP,UAAWC,QAE1DpB,EAAAA,EAAAA,MAAA,OAAKmB,UAAWC,EAAiBnB,SAAA,EAC7BJ,EAAAA,EAAAA,KAAA,SAAAI,SAAO,eACPJ,EAAAA,EAAAA,KAACwB,EAAAA,GAAK,CAACC,KAAK,WAAWC,KAAK,WAAWJ,UAAS,GAAAK,OAAKJ,EAAY,KAAAI,OAAId,EAAOL,UAAYY,EAAQZ,SAAWe,EAAgB,OAC3HvB,EAAAA,EAAAA,KAAC4B,EAAAA,GAAY,CAACF,KAAK,WAAWG,UAAU,MAAMP,UAAWC,QAE7DpB,EAAAA,EAAAA,MAAA,OAAKmB,UAAWC,EAAoBnB,SAAA,EAChCJ,EAAAA,EAAAA,KAAA,SAAAI,SAAO,iBACPJ,EAAAA,EAAAA,KAACwB,EAAAA,GAAK,CAACC,KAAK,WAAWC,KAAK,aAAaJ,UAAWC,QAExDvB,EAAAA,EAAAA,KAAA,OAAAI,SACKP,IAAcG,EAAAA,EAAAA,KAAA,OAAKsB,UAAWC,EAAcnB,SAAEP,OAEnDG,EAAAA,EAAAA,KAAA,UAAQyB,KAAK,SAASH,UAAWC,EAASnB,SAAC,cAE5C,MAGb,C","sources":["webpack://social-network/./src/components/Login/Login.module.css?3530","components/Login/Login.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginForm\":\"Login_loginForm__a69N6\",\"loginFormContainer\":\"Login_loginFormContainer__2b9+B\",\"inputContainer\":\"Login_inputContainer__74dxZ\",\"checkBoxContainer\":\"Login_checkBoxContainer__LvzaU\",\"checkbox\":\"Login_checkbox__1HTDN\",\"inputField\":\"Login_inputField__IqDS5\",\"error\":\"Login_error__kjhV-\",\"errorBorder\":\"Login_errorBorder__YrQXA\",\"button\":\"Login_button__fwiI+\",\"serverError\":\"Login_serverError__en1ta\"};","import React, { useState } from 'react';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport s from './Login.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { login } from '../../redux/reducers/auth-reducer';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nconst Login = () => {\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector((state) => state.auth.isAuth);\r\n    const [loginError, setError] = useState(null);\r\n\r\n    const initialValues = {\r\n        email: '',\r\n        password: '',\r\n        rememberMe: false,\r\n        captcha: ''\r\n    };\r\n\r\n    const validate = (values) => {\r\n        const errors = {};\r\n\r\n        if (!values.email) {\r\n            errors.email = 'Required';\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = 'Invalid email address';\r\n        }\r\n\r\n        if (!values.password) {\r\n            errors.password = 'Required';\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n\r\n    const onSubmit = (data) => {\r\n        setError(null);\r\n\r\n        dispatch(login(data, (errorMessage) => setError(errorMessage)));\r\n        // console.log('Form values submitted:', data);\r\n    };\r\n    \r\n\r\n    if (isAuth) {\r\n        return <Navigate to='/profile' />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                validate={validate}\r\n                onSubmit={onSubmit}\r\n            >\r\n                {({ errors, touched }) => (\r\n                    <Form className={s.loginForm}>\r\n                        <div className={s.loginFormContainer}>\r\n                            <div className={s.inputContainer}>\r\n                                <label>Email:</label>\r\n                                <Field type=\"email\" name=\"email\" className={`${s.inputField} ${errors.email && touched.email ? s.errorBorder : ''}`} />\r\n                                <ErrorMessage name=\"email\" component=\"div\" className={s.error} />\r\n                            </div>\r\n                            <div className={s.inputContainer}>\r\n                                <label>Password:</label>\r\n                                <Field type=\"password\" name=\"password\" className={`${s.inputField} ${errors.password && touched.password ? s.errorBorder : ''}`} />\r\n                                <ErrorMessage name=\"password\" component=\"div\" className={s.error} />\r\n                            </div>\r\n                            <div className={s.checkBoxContainer}>\r\n                                <label>Remember me</label>\r\n                                <Field type=\"checkbox\" name=\"rememberMe\" className={s.checkbox} />\r\n                            </div>\r\n                            <div>\r\n                                {loginError && <div className={s.serverError}>{loginError}</div>}\r\n                            </div>\r\n                            <button type=\"submit\" className={s.button}>Login</button>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;"],"names":["Login","dispatch","useDispatch","isAuth","useSelector","state","auth","loginError","setError","useState","_jsx","Navigate","to","_jsxs","children","Formik","initialValues","email","password","rememberMe","captcha","validate","values","errors","test","onSubmit","data","login","errorMessage","_ref","touched","Form","className","s","Field","type","name","concat","ErrorMessage","component"],"sourceRoot":""}